//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CorsairDashboard.HydroService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HydroLedInfo", Namespace="http://schemas.datacontract.org/2004/07/HydroLib")]
    [System.SerializableAttribute()]
    public partial class HydroLedInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] Color1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] Color2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] Color3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] Color4Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CorsairDashboard.HydroService.LedMode ModeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Color1 {
            get {
                return this.Color1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Color1Field, value) != true)) {
                    this.Color1Field = value;
                    this.RaisePropertyChanged("Color1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Color2 {
            get {
                return this.Color2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Color2Field, value) != true)) {
                    this.Color2Field = value;
                    this.RaisePropertyChanged("Color2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Color3 {
            get {
                return this.Color3Field;
            }
            set {
                if ((object.ReferenceEquals(this.Color3Field, value) != true)) {
                    this.Color3Field = value;
                    this.RaisePropertyChanged("Color3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Color4 {
            get {
                return this.Color4Field;
            }
            set {
                if ((object.ReferenceEquals(this.Color4Field, value) != true)) {
                    this.Color4Field = value;
                    this.RaisePropertyChanged("Color4");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CorsairDashboard.HydroService.LedMode Mode {
            get {
                return this.ModeField;
            }
            set {
                if ((this.ModeField.Equals(value) != true)) {
                    this.ModeField = value;
                    this.RaisePropertyChanged("Mode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LedMode", Namespace="http://schemas.datacontract.org/2004/07/HydroLib")]
    public enum LedMode : byte {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StaticColor = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TwoColorsCycle = 75,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FourColorCycle = 139,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TemperatureBased = 192,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HydroFanInfo", Namespace="http://schemas.datacontract.org/2004/07/HydroLib")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(CorsairDashboard.Common.Service.CorsairHydroServiceState))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(CorsairDashboard.Common.Service.ConnectedDeviceInfo[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(CorsairDashboard.Common.Service.ConnectedDeviceInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(CorsairDashboard.HydroService.HydroLedInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(CorsairDashboard.HydroService.LedMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(CorsairDashboard.HydroService.FanMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ushort[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Tuple<ushort[], ushort[]>))]
    public partial class HydroFanInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxRpmField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CorsairDashboard.HydroService.FanMode ModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object RawValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RpmField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxRpm {
            get {
                return this.MaxRpmField;
            }
            set {
                if ((this.MaxRpmField.Equals(value) != true)) {
                    this.MaxRpmField = value;
                    this.RaisePropertyChanged("MaxRpm");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CorsairDashboard.HydroService.FanMode Mode {
            get {
                return this.ModeField;
            }
            set {
                if ((this.ModeField.Equals(value) != true)) {
                    this.ModeField = value;
                    this.RaisePropertyChanged("Mode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Number {
            get {
                return this.NumberField;
            }
            set {
                if ((this.NumberField.Equals(value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object RawValue {
            get {
                return this.RawValueField;
            }
            set {
                if ((object.ReferenceEquals(this.RawValueField, value) != true)) {
                    this.RawValueField = value;
                    this.RaisePropertyChanged("RawValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Rpm {
            get {
                return this.RpmField;
            }
            set {
                if ((this.RpmField.Equals(value) != true)) {
                    this.RpmField = value;
                    this.RaisePropertyChanged("Rpm");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FanMode", Namespace="http://schemas.datacontract.org/2004/07/HydroLib")]
    public enum FanMode : byte {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FixedPWM = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FixedRPM = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Default = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Quiet = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Balanced = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Performance = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Custom = 14,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HydroService.ICorsairHydroService", CallbackContract=typeof(CorsairDashboard.HydroService.ICorsairHydroServiceCallback))]
    public interface ICorsairHydroService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICorsairHydroService/GetServiceState", ReplyAction="http://tempuri.org/ICorsairHydroService/GetServiceStateResponse")]
        CorsairDashboard.Common.Service.CorsairHydroServiceState GetServiceState();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICorsairHydroService/GetServiceState", ReplyAction="http://tempuri.org/ICorsairHydroService/GetServiceStateResponse")]
        System.Threading.Tasks.Task<CorsairDashboard.Common.Service.CorsairHydroServiceState> GetServiceStateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICorsairHydroService/GetConnectedDevicesInfo", ReplyAction="http://tempuri.org/ICorsairHydroService/GetConnectedDevicesInfoResponse")]
        CorsairDashboard.Common.Service.ConnectedDeviceInfo[] GetConnectedDevicesInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICorsairHydroService/GetConnectedDevicesInfo", ReplyAction="http://tempuri.org/ICorsairHydroService/GetConnectedDevicesInfoResponse")]
        System.Threading.Tasks.Task<CorsairDashboard.Common.Service.ConnectedDeviceInfo[]> GetConnectedDevicesInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICorsairHydroService/ForceRefreshConnectedDevicesInfo")]
        void ForceRefreshConnectedDevicesInfo();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICorsairHydroService/ForceRefreshConnectedDevicesInfo")]
        System.Threading.Tasks.Task ForceRefreshConnectedDevicesInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICorsairHydroService/SubscribeForUpdateForDevice")]
        void SubscribeForUpdateForDevice(System.Guid deviceId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICorsairHydroService/SubscribeForUpdateForDevice")]
        System.Threading.Tasks.Task SubscribeForUpdateForDeviceAsync(System.Guid deviceId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICorsairHydroService/UnsubscribeForUpdateForDevice")]
        void UnsubscribeForUpdateForDevice(System.Guid deviceId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICorsairHydroService/UnsubscribeForUpdateForDevice")]
        System.Threading.Tasks.Task UnsubscribeForUpdateForDeviceAsync(System.Guid deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICorsairHydroService/GetNumberOfFansForDevice", ReplyAction="http://tempuri.org/ICorsairHydroService/GetNumberOfFansForDeviceResponse")]
        int GetNumberOfFansForDevice(System.Guid deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICorsairHydroService/GetNumberOfFansForDevice", ReplyAction="http://tempuri.org/ICorsairHydroService/GetNumberOfFansForDeviceResponse")]
        System.Threading.Tasks.Task<int> GetNumberOfFansForDeviceAsync(System.Guid deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICorsairHydroService/GetLedInfoForDevice", ReplyAction="http://tempuri.org/ICorsairHydroService/GetLedInfoForDeviceResponse")]
        CorsairDashboard.HydroService.HydroLedInfo GetLedInfoForDevice(System.Guid deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICorsairHydroService/GetLedInfoForDevice", ReplyAction="http://tempuri.org/ICorsairHydroService/GetLedInfoForDeviceResponse")]
        System.Threading.Tasks.Task<CorsairDashboard.HydroService.HydroLedInfo> GetLedInfoForDeviceAsync(System.Guid deviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICorsairHydroService/SetLedCycleColorsForDevice", ReplyAction="http://tempuri.org/ICorsairHydroService/SetLedCycleColorsForDeviceResponse")]
        bool SetLedCycleColorsForDevice(System.Guid deviceId, byte[] color1, byte[] color2, byte[] color3, byte[] color4);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICorsairHydroService/SetLedCycleColorsForDevice", ReplyAction="http://tempuri.org/ICorsairHydroService/SetLedCycleColorsForDeviceResponse")]
        System.Threading.Tasks.Task<bool> SetLedCycleColorsForDeviceAsync(System.Guid deviceId, byte[] color1, byte[] color2, byte[] color3, byte[] color4);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICorsairHydroService/SetLedSingleColorForDevice", ReplyAction="http://tempuri.org/ICorsairHydroService/SetLedSingleColorForDeviceResponse")]
        bool SetLedSingleColorForDevice(System.Guid deviceId, byte[] color, bool pulse);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICorsairHydroService/SetLedSingleColorForDevice", ReplyAction="http://tempuri.org/ICorsairHydroService/SetLedSingleColorForDeviceResponse")]
        System.Threading.Tasks.Task<bool> SetLedSingleColorForDeviceAsync(System.Guid deviceId, byte[] color, bool pulse);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICorsairHydroService/SetPwmFanForDevice", ReplyAction="http://tempuri.org/ICorsairHydroService/SetPwmFanForDeviceResponse")]
        bool SetPwmFanForDevice(System.Guid deviceId, int fanNr, byte pwmDutyCycle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICorsairHydroService/SetPwmFanForDevice", ReplyAction="http://tempuri.org/ICorsairHydroService/SetPwmFanForDeviceResponse")]
        System.Threading.Tasks.Task<bool> SetPwmFanForDeviceAsync(System.Guid deviceId, int fanNr, byte pwmDutyCycle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICorsairHydroService/SetRpmFanForDevice", ReplyAction="http://tempuri.org/ICorsairHydroService/SetRpmFanForDeviceResponse")]
        bool SetRpmFanForDevice(System.Guid deviceId, int fanNr, ushort rpm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICorsairHydroService/SetRpmFanForDevice", ReplyAction="http://tempuri.org/ICorsairHydroService/SetRpmFanForDeviceResponse")]
        System.Threading.Tasks.Task<bool> SetRpmFanForDeviceAsync(System.Guid deviceId, int fanNr, ushort rpm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICorsairHydroService/SetFanModeToDefaultProfileForDevice", ReplyAction="http://tempuri.org/ICorsairHydroService/SetFanModeToDefaultProfileForDeviceRespon" +
            "se")]
        bool SetFanModeToDefaultProfileForDevice(System.Guid deviceId, int fanNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICorsairHydroService/SetFanModeToDefaultProfileForDevice", ReplyAction="http://tempuri.org/ICorsairHydroService/SetFanModeToDefaultProfileForDeviceRespon" +
            "se")]
        System.Threading.Tasks.Task<bool> SetFanModeToDefaultProfileForDeviceAsync(System.Guid deviceId, int fanNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICorsairHydroService/SetFanModeToQuietProfileForDevice", ReplyAction="http://tempuri.org/ICorsairHydroService/SetFanModeToQuietProfileForDeviceResponse" +
            "")]
        bool SetFanModeToQuietProfileForDevice(System.Guid deviceId, int fanNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICorsairHydroService/SetFanModeToQuietProfileForDevice", ReplyAction="http://tempuri.org/ICorsairHydroService/SetFanModeToQuietProfileForDeviceResponse" +
            "")]
        System.Threading.Tasks.Task<bool> SetFanModeToQuietProfileForDeviceAsync(System.Guid deviceId, int fanNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICorsairHydroService/SetFanModeToBalancedProfileForDevice", ReplyAction="http://tempuri.org/ICorsairHydroService/SetFanModeToBalancedProfileForDeviceRespo" +
            "nse")]
        bool SetFanModeToBalancedProfileForDevice(System.Guid deviceId, int fanNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICorsairHydroService/SetFanModeToBalancedProfileForDevice", ReplyAction="http://tempuri.org/ICorsairHydroService/SetFanModeToBalancedProfileForDeviceRespo" +
            "nse")]
        System.Threading.Tasks.Task<bool> SetFanModeToBalancedProfileForDeviceAsync(System.Guid deviceId, int fanNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICorsairHydroService/SetFanModeToPerformanceProfileForDevice", ReplyAction="http://tempuri.org/ICorsairHydroService/SetFanModeToPerformanceProfileForDeviceRe" +
            "sponse")]
        bool SetFanModeToPerformanceProfileForDevice(System.Guid deviceId, int fanNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICorsairHydroService/SetFanModeToPerformanceProfileForDevice", ReplyAction="http://tempuri.org/ICorsairHydroService/SetFanModeToPerformanceProfileForDeviceRe" +
            "sponse")]
        System.Threading.Tasks.Task<bool> SetFanModeToPerformanceProfileForDeviceAsync(System.Guid deviceId, int fanNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICorsairHydroService/SetTemperatureBasedRpmFanForDevice", ReplyAction="http://tempuri.org/ICorsairHydroService/SetTemperatureBasedRpmFanForDeviceRespons" +
            "e")]
        bool SetTemperatureBasedRpmFanForDevice(System.Guid deviceId, int fanNr, ushort[] temperatures, ushort[] rpms, string sensorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICorsairHydroService/SetTemperatureBasedRpmFanForDevice", ReplyAction="http://tempuri.org/ICorsairHydroService/SetTemperatureBasedRpmFanForDeviceRespons" +
            "e")]
        System.Threading.Tasks.Task<bool> SetTemperatureBasedRpmFanForDeviceAsync(System.Guid deviceId, int fanNr, ushort[] temperatures, ushort[] rpms, string sensorId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICorsairHydroServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICorsairHydroService/OnWaterTemperatureUpdateForDevice")]
        void OnWaterTemperatureUpdateForDevice(System.Guid deviceId, int temperature);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICorsairHydroService/OnFanInfoUpdateForDevice")]
        void OnFanInfoUpdateForDevice(System.Guid deviceId, CorsairDashboard.HydroService.HydroFanInfo fanInfo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICorsairHydroServiceChannel : CorsairDashboard.HydroService.ICorsairHydroService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CorsairHydroServiceClient : System.ServiceModel.DuplexClientBase<CorsairDashboard.HydroService.ICorsairHydroService>, CorsairDashboard.HydroService.ICorsairHydroService {
        
        public CorsairHydroServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public CorsairHydroServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public CorsairHydroServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CorsairHydroServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CorsairHydroServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public CorsairDashboard.Common.Service.CorsairHydroServiceState GetServiceState() {
            return base.Channel.GetServiceState();
        }
        
        public System.Threading.Tasks.Task<CorsairDashboard.Common.Service.CorsairHydroServiceState> GetServiceStateAsync() {
            return base.Channel.GetServiceStateAsync();
        }
        
        public CorsairDashboard.Common.Service.ConnectedDeviceInfo[] GetConnectedDevicesInfo() {
            return base.Channel.GetConnectedDevicesInfo();
        }
        
        public System.Threading.Tasks.Task<CorsairDashboard.Common.Service.ConnectedDeviceInfo[]> GetConnectedDevicesInfoAsync() {
            return base.Channel.GetConnectedDevicesInfoAsync();
        }
        
        public void ForceRefreshConnectedDevicesInfo() {
            base.Channel.ForceRefreshConnectedDevicesInfo();
        }
        
        public System.Threading.Tasks.Task ForceRefreshConnectedDevicesInfoAsync() {
            return base.Channel.ForceRefreshConnectedDevicesInfoAsync();
        }
        
        public void SubscribeForUpdateForDevice(System.Guid deviceId) {
            base.Channel.SubscribeForUpdateForDevice(deviceId);
        }
        
        public System.Threading.Tasks.Task SubscribeForUpdateForDeviceAsync(System.Guid deviceId) {
            return base.Channel.SubscribeForUpdateForDeviceAsync(deviceId);
        }
        
        public void UnsubscribeForUpdateForDevice(System.Guid deviceId) {
            base.Channel.UnsubscribeForUpdateForDevice(deviceId);
        }
        
        public System.Threading.Tasks.Task UnsubscribeForUpdateForDeviceAsync(System.Guid deviceId) {
            return base.Channel.UnsubscribeForUpdateForDeviceAsync(deviceId);
        }
        
        public int GetNumberOfFansForDevice(System.Guid deviceId) {
            return base.Channel.GetNumberOfFansForDevice(deviceId);
        }
        
        public System.Threading.Tasks.Task<int> GetNumberOfFansForDeviceAsync(System.Guid deviceId) {
            return base.Channel.GetNumberOfFansForDeviceAsync(deviceId);
        }
        
        public CorsairDashboard.HydroService.HydroLedInfo GetLedInfoForDevice(System.Guid deviceId) {
            return base.Channel.GetLedInfoForDevice(deviceId);
        }
        
        public System.Threading.Tasks.Task<CorsairDashboard.HydroService.HydroLedInfo> GetLedInfoForDeviceAsync(System.Guid deviceId) {
            return base.Channel.GetLedInfoForDeviceAsync(deviceId);
        }
        
        public bool SetLedCycleColorsForDevice(System.Guid deviceId, byte[] color1, byte[] color2, byte[] color3, byte[] color4) {
            return base.Channel.SetLedCycleColorsForDevice(deviceId, color1, color2, color3, color4);
        }
        
        public System.Threading.Tasks.Task<bool> SetLedCycleColorsForDeviceAsync(System.Guid deviceId, byte[] color1, byte[] color2, byte[] color3, byte[] color4) {
            return base.Channel.SetLedCycleColorsForDeviceAsync(deviceId, color1, color2, color3, color4);
        }
        
        public bool SetLedSingleColorForDevice(System.Guid deviceId, byte[] color, bool pulse) {
            return base.Channel.SetLedSingleColorForDevice(deviceId, color, pulse);
        }
        
        public System.Threading.Tasks.Task<bool> SetLedSingleColorForDeviceAsync(System.Guid deviceId, byte[] color, bool pulse) {
            return base.Channel.SetLedSingleColorForDeviceAsync(deviceId, color, pulse);
        }
        
        public bool SetPwmFanForDevice(System.Guid deviceId, int fanNr, byte pwmDutyCycle) {
            return base.Channel.SetPwmFanForDevice(deviceId, fanNr, pwmDutyCycle);
        }
        
        public System.Threading.Tasks.Task<bool> SetPwmFanForDeviceAsync(System.Guid deviceId, int fanNr, byte pwmDutyCycle) {
            return base.Channel.SetPwmFanForDeviceAsync(deviceId, fanNr, pwmDutyCycle);
        }
        
        public bool SetRpmFanForDevice(System.Guid deviceId, int fanNr, ushort rpm) {
            return base.Channel.SetRpmFanForDevice(deviceId, fanNr, rpm);
        }
        
        public System.Threading.Tasks.Task<bool> SetRpmFanForDeviceAsync(System.Guid deviceId, int fanNr, ushort rpm) {
            return base.Channel.SetRpmFanForDeviceAsync(deviceId, fanNr, rpm);
        }
        
        public bool SetFanModeToDefaultProfileForDevice(System.Guid deviceId, int fanNr) {
            return base.Channel.SetFanModeToDefaultProfileForDevice(deviceId, fanNr);
        }
        
        public System.Threading.Tasks.Task<bool> SetFanModeToDefaultProfileForDeviceAsync(System.Guid deviceId, int fanNr) {
            return base.Channel.SetFanModeToDefaultProfileForDeviceAsync(deviceId, fanNr);
        }
        
        public bool SetFanModeToQuietProfileForDevice(System.Guid deviceId, int fanNr) {
            return base.Channel.SetFanModeToQuietProfileForDevice(deviceId, fanNr);
        }
        
        public System.Threading.Tasks.Task<bool> SetFanModeToQuietProfileForDeviceAsync(System.Guid deviceId, int fanNr) {
            return base.Channel.SetFanModeToQuietProfileForDeviceAsync(deviceId, fanNr);
        }
        
        public bool SetFanModeToBalancedProfileForDevice(System.Guid deviceId, int fanNr) {
            return base.Channel.SetFanModeToBalancedProfileForDevice(deviceId, fanNr);
        }
        
        public System.Threading.Tasks.Task<bool> SetFanModeToBalancedProfileForDeviceAsync(System.Guid deviceId, int fanNr) {
            return base.Channel.SetFanModeToBalancedProfileForDeviceAsync(deviceId, fanNr);
        }
        
        public bool SetFanModeToPerformanceProfileForDevice(System.Guid deviceId, int fanNr) {
            return base.Channel.SetFanModeToPerformanceProfileForDevice(deviceId, fanNr);
        }
        
        public System.Threading.Tasks.Task<bool> SetFanModeToPerformanceProfileForDeviceAsync(System.Guid deviceId, int fanNr) {
            return base.Channel.SetFanModeToPerformanceProfileForDeviceAsync(deviceId, fanNr);
        }
        
        public bool SetTemperatureBasedRpmFanForDevice(System.Guid deviceId, int fanNr, ushort[] temperatures, ushort[] rpms, string sensorId) {
            return base.Channel.SetTemperatureBasedRpmFanForDevice(deviceId, fanNr, temperatures, rpms, sensorId);
        }
        
        public System.Threading.Tasks.Task<bool> SetTemperatureBasedRpmFanForDeviceAsync(System.Guid deviceId, int fanNr, ushort[] temperatures, ushort[] rpms, string sensorId) {
            return base.Channel.SetTemperatureBasedRpmFanForDeviceAsync(deviceId, fanNr, temperatures, rpms, sensorId);
        }
    }
}
